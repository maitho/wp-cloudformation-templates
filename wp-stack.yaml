AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  ECSCluster:
    Description: "Name of the ECS cluster to deploy this service to"
    Type: String
  SSLCertificateArn:
    Description: "ARN of the SSL certificate to use from ACM"
    Type: String
  DockerImage:
    Description: "Docker image to use (including tag)"
    Type: String
  DbHost:
    Description: "Database server hostname"
    Type: String
  DbName:
    Description: "Name of the database"
    Type: String
  DbUsername:
    Description: "Database username"
    Type: String
  DbPassword:
    Description: "Database password"
    Type: String
    NoEcho: 'true'
  SmtpHost:
    Description: "SMTP server hostname"
    Type: String
  SmtpPort:
    Description: "SMTP port"
    Type: Number
    Default: '25'
  SmtpUsername:
    Description: "SMTP username"
    Type: String
  SmtpPassword:
    Description: "SMTP password"
    Type: String
    NoEcho: 'true'
  SmtpSecurity:
    Description: "SMTP security type"
    Type: String
    AllowedValues:
      - None
      - SSL
      - STARTTLS
  LoginWhitelistIps:
    Description: "A comma-separated list of IP addresses that should be allowed to access the WordPress login page."
    Type: String
  SiteWhitelistIps:
    Description: "A comma-separated list of IP addresses to whitelist the entire website."
    Type: String
    Default: ""
Outputs:
  DNSName:
    Description: "DNS name of the service. Use this directly or as a CNAME."
    Value: !Ref DNSRecord
Conditions:
  SmtpUseSsl: !Equals [!Ref SmtpSecurity, SSL]
  SmtpUseStarttls: !Equals [!Ref SmtpSecurity, STARTTLS]
Resources:
  ##
  # ECS task & service
  ##
  WebTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - StorageUserAccessKey
    Properties:
      ContainerDefinitions:
        - Name: web
          Essential: 'true'
          Image: !Ref DockerImage
          Memory: '300'
          Privileged: 'true'
          PortMappings:
            - ContainerPort: '80'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: ECS-wordpress
              awslogs-region: eu-west-1
              awslogs-stream-prefix: !Ref AWS::StackName
          Environment:
            - Name: AWS_ACCESS_KEY_ID
              Value: !Ref StorageUserAccessKey
            - Name: AWS_SECRET_ACCESS_KEY
              Value: !GetAtt StorageUserAccessKey.SecretAccessKey
            - Name: AWS_S3_BUCKET
              Value: !Ref Storage
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: SNS_TOPIC
              Value: !Ref StorageTopic
            - Name: DB_HOST
              Value: !Ref DbHost
            - Name: DB_NAME
              Value: !Ref DbName
            - Name: DB_USER
              Value: !Ref DbUsername
            - Name: DB_PASSWORD
              Value: !Ref DbPassword
            - Name: LB_IP_RANGE
              Value: 10.0.0.0/16
            - Name: LOGIN_WHITELIST_IPS
              Value: !Ref LoginWhitelistIps
            - Name: SITE_WHITELIST_IPS
              Value: !Ref SiteWhitelistIps
            - Name: S3_UPLOADS_BASE_URL
              Value: !Join [ '', [ 'https://s3-', !Ref 'AWS::Region', '.amazonaws.com/', !Ref Storage, '/uploads' ] ]
            - Name: SERVER_NAME
              Value: !Join [ '', [ !Ref 'AWS::StackName', '.wp.dsd.io' ] ]
            - Name: SMTP_HOST
              Value: !Ref SmtpHost
            - Name: SMTP_USER
              Value: !Ref SmtpUsername
            - Name: SMTP_PASS
              Value: !Ref SmtpPassword
            - Name: SMTP_USE_SSL
              Value: !If [SmtpUseSsl, 'true', !Ref 'AWS::NoValue']
            - Name: SMTP_USE_STARTTLS
              Value: !If [SmtpUseStarttls, 'true', !Ref 'AWS::NoValue']
            - Name: WP_HOME
              Value: !Join [ '', [ 'https://', !Ref 'AWS::StackName', '.wp.dsd.io' ] ]
            - Name: WP_SITEURL
              Value: !Join [ '', [ 'https://', !Ref 'AWS::StackName', '.wp.dsd.io', '/wp' ] ]
      Family: !Ref AWS::StackName
  WebService:
    Type: AWS::ECS::Service
    DependsOn:
      - TargetGroup
      - WebTaskDefinition
      - HttpListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: '2'
      LoadBalancers:
        - ContainerName: web
          ContainerPort: '80'
          TargetGroupArn: !Ref TargetGroup
      Role: ecsServiceRole
      TaskDefinition: !Ref WebTaskDefinition
  ##
  # Uploads storage
  ##
  Storage:
    Type: AWS::S3::Bucket
  StorageTopic:
    Type: AWS::SNS::Topic
  StorageUser:
    Type: AWS::IAM::User
    Properties:
      Groups:
        - WordPress
      Policies:
        - PolicyName: yas3fs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                Effect: Allow
                Resource:
                  - !Join [ '', [ 'arn:aws:s3:::', !Ref Storage ] ]
                  - !Join [ '', [ 'arn:aws:s3:::', !Ref Storage, '/*' ] ]
              - Action:
                  - sns:ConfirmSubscription
                  - sns:GetTopicAttributes
                  - sns:Publish
                  - sns:Subscribe
                  - sns:Unsubscribe
                Effect: Allow
                Resource: !Ref StorageTopic
              - Action: sqs:*
                Effect: Allow
                Resource: !Join [ '', [ 'arn:aws:sqs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':yas3fs-*' ] ]
  StorageUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref StorageUser
  ##
  # Load Balancer
  ##
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: 'internet-facing'
      SecurityGroups:
        - sg-47607b20
      Subnets:
        - subnet-02e68474
        - subnet-5060d008
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - LoadBalancer
    Properties:
      Protocol: HTTP
      Port: '80'
      VpcId: vpc-849e0fe0
  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TargetGroup
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: '80'
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TargetGroup
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: '443'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  ##
  # DNS record
  ##
  DNSRecord:
    Type: AWS::Route53::RecordSet
    DependsOn:
      - LoadBalancer
    Properties:
      HostedZoneName: "wp.dsd.io."
      Name: !Join [ '', [ !Ref 'AWS::StackName', '.wp.dsd.io.' ] ]
      Type: "A"
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
