
Parameters:
  AppName:
    Description: "Name of the application"
    Type: String
    AllowedPattern: "[a-z0-9-]+"
    ConstraintDescription: "must only contain lowercase letters, numbers and hyphens"
  DockerImage:
    Description: "Docker image to use (including tag)"
    Type: String
  Environment:
    Description: "The environment this application should run in."
    Type: String
    Default: development

  AwsAccessKeyId:
    Description: "Credentials for the AWS account that holds the media upload S3 bucket"
    Type: String
  AwsSecretAccessKey:
    Description: "Credentials for the AWS account that holds the media upload S3 bucket"
    Type: String
  MediaUploadsS3Bucket:
    Description: "the bucket+path where media will be uploaded, e.g. moj-intranet-demo/wp-content/uploads/"
    Type: String
  SnsTopic:
    Description: ""
    Type: String
  AwsDefaultRegion:
    Description: ""
    Type: String
  DbHost:
    Description: "Database server hostname"
    Type: String
  DbName:
    Description: "Name of the database"
    Type: String
  DbUser:
    Description: "Database username"
    Type: String
  DbPassword:
    Description: "Database password"
    Type: String
    NoEcho: 'true'
  ServerName:
    Description: ""
    Type: String
  WpDebug:
    Description: ""
    Type: String
  RootDir:
    Description: ""
    Type: String
  WpMediaUploadsDir:
    Description: ""
    Type: String
  DisableWpCron:
    Description: ""
    Type: String  
  Yas3fsLogFile:
    Description: ""
    Type: String
  SmtpHost:
    Description: "SMTP server hostname"
    Type: String
  SmtpPort:
    Description: "SMTP port"
    Type: Number
    Default: '25'
  SmtpUser:
    Description: "SMTP username"
    Type: String
  SmtpPass:
    Description: "SMTP password"
    Type: String
    NoEcho: 'true'
  SmtpUseStarttls:
    Description: "SMTP use TLS"
    Type: String
  LoginWhitelistIps:
    Description: "A comma-separated list of IP addresses that should be allowed to access the WordPress login page."
    Type: String
    Default: ""
  SiteWhitelistIps:
    Description: "(optional) A comma-separated list of IP addresses to whitelist the entire website."
    Type: String
    Default: ""
  CustomSslCertificateArn:
    Description: "(optional) SSL Certificate ARN to be used with the custom domain name."
    Type: String
    Default: ""
  AuthKey:
    Description: "AUTH_KEY for WordPress"
    Type: String
    NoEcho: 'true'
  SecureAuthKey:
    Description: "SECURE_AUTH_KEY for WordPress"
    Type: String
    NoEcho: 'true'
  LoggedInKey:
    Description: "LOGGED_IN_KEY for WordPress"
    Type: String
    NoEcho: 'true'
  NonceKey:
    Description: "NONCE_KEY for WordPress"
    Type: String
    NoEcho: 'true'
  AuthSalt:
    Description: "AUTH_SALT for WordPress"
    Type: String
    NoEcho: 'true'
  SecureAuthSalt:
    Description: "SECURE_AUTH_SALT for WordPress"
    Type: String
    NoEcho: 'true'
  LoggedInSalt:
    Description: "LOGGED_IN_SALT for WordPress"
    Type: String
    NoEcho: 'true'
  NonceSalt:
    Description: "NONCE_SALT for WordPress"
    Type: String
    NoEcho: 'true'
  Active:
    Description: "If the service is 'turned on'. Off services will retain data but will not have containers/load balancers."
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
Mappings:
  EnvironmentMap:
    demo:
      HostedZone: intranet.dsd.io.
      AWSLogGroup: demo
      ECSCluster: demo
      ECSRole: ecsInstanceRole
      # *.demo.intranet.dsd.io cert
      SSLCertificateArn: arn:aws:acm:eu-west-1:715475543920:certificate/2d57ac86-0129-4b29-9403-ac9f7323084b
      TargetGroupVPC: vpc-b4b65ed3
      # dev-servers-zoneC & B respectively subnets
      ELBSubnet1: subnet-8db84cea 
      ELBSubnet2: subnet-e7de38bc
      # MOJ internal IPs
      SecurityGroup: sg-3f76fd46
      DesiredContainerCount: 1
      InstanceType: t2.medium


Conditions:
  UseCustomSSLCertificateArn: !Not [ !Equals [ !Ref CustomSslCertificateArn, "" ] ]
  UsesLoadBalancer: !Not [ !Equals [ !FindInMap [ EnvironmentMap, !Ref Environment, ELBSubnet1 ], "" ] ]
  IsActive: !Or
    - !Equals [ !Ref Active, "true" ]
    - !Equals [ !Ref Environment, "production" ]
  IsActiveAndUsesLoadBalancer: !And
    - !Or
      - !Equals [ !Ref Active, "true" ]
      - !Equals [ !Ref Environment, "production" ]
    - !Not [ !Equals [ !FindInMap [ EnvironmentMap, !Ref Environment, ELBSubnet1 ], "" ] ]
Outputs:
  DNSName:
    Description: "DNS name of the service. Use this directly or as a CNAME."
    Value: !If [ IsActive, !Ref DNSRecord, 'None' ]
  
  

Resources:
  ##
  # ECS task & service
  ##
  IntranetTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: mojintranet
          Essential: 'true'
          Image: !Join [ '', [ '715475543920.dkr.ecr.eu-west-1.amazonaws.com/', !Ref DockerImage ] ]
          Memory: 500
          MemoryReservation: 300
          Privileged: 'true'
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !FindInMap [ EnvironmentMap, !Ref Environment, AWSLogGroup ]
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref AppName
          Environment:
            - Name: LB_IP_RANGE
              Value: 10.0.0.0/16
            - Name: LOGIN_WHITELIST_IPS
              Value: !Ref LoginWhitelistIps
            - Name: SITE_WHITELIST_IPS
              Value: !Ref SiteWhitelistIps

            - Name: SERVER_NAME
              Value: !Ref ServerName
            - Name: SMTP_HOST
              Value: !Ref SmtpHost
            - Name: SMTP_USER
              Value: !Ref SmtpUser
            - Name: SMTP_PASS
              Value: !Ref SmtpPass
            - Name: SMTP_USE_SSL
              Value: "false"
            - Name: SMTP_USE_STARTTLS
              Value: !Ref SmtpUseStarttls
            - Name: APP_NAME
              Value: !Ref AppName
            - Name: ACTIVE
              Value: !Ref Active
            - Name: DOCKER_IMAGE
              Value: !Ref DockerImage
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: AWS_ACCESS_KEY_ID
              Value: !Ref AwsAccessKeyId
            - Name: AWS_SECRET_ACCESS_KEY
              Value: !Ref AwsSecretAccessKey
            - Name: MEDIA_UPLOADS_S3_BUCKET
              Value: !Ref MediaUploadsS3Bucket  
            - Name: SNS_TOPIC
              Value: !Ref SnsTopic
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AwsDefaultRegion
            - Name: DB_HOST
              Value: !Ref DbHost
            - Name: DB_USER
              Value: !Ref DbUser
            - Name: DB_PASSWORD
              Value: !Ref DbPassword
            - Name: DB_NAME
              Value: !Ref DbName
            - Name: WP_SITEURL
              Value: !Join [ '', [ "http://", !Ref ServerName, "/wp" ] ]
            - Name: WP_HOME
              Value: !Join [ '', [ "http://", !Ref ServerName ] ] 
            - Name: WP_DEBUG
              Value: !Ref WpDebug
            - Name: WP_ENV
              Value: !Ref Environment
            - Name: ROOT_DIR
              Value: !Ref RootDir
            - Name: WP_MEDIA_UPLOADS_DIR
              Value: !Ref WpMediaUploadsDir
            - Name: DISABLE_WP_CRON
              Value: !Ref DisableWpCron  
            - Name: YAS3FS_LOG_FILE
              Value: !Ref Yas3fsLogFile
            - Name: AUTH_KEY
              Value: !Ref AuthKey
            - Name: SECURE_AUTH_KEY
              Value: !Ref SecureAuthKey
            - Name: LOGGED_IN_KEY
              Value: !Ref LoggedInKey
            - Name: NONCE_KEY
              Value: !Ref NonceKey
            - Name: AUTH_SALT
              Value: !Ref AuthSalt
            - Name: SECURE_AUTH_SALT
              Value: !Ref SecureAuthSalt
            - Name: LOGGED_IN_SALT
              Value: !Ref LoggedInSalt
            - Name: NONCE_SALT
              Value: !Ref NonceSalt
      Family: !Ref AWS::StackName
  IntranetService:
    Condition: IsActive
    Type: AWS::ECS::Service
    DependsOn:
      - TargetGroup
      - IntranetTaskDefinition
      - HttpListener
    Properties:
      Cluster: !FindInMap [ EnvironmentMap, !Ref Environment, ECSCluster ]
      DesiredCount: !FindInMap [ EnvironmentMap, !Ref Environment, DesiredContainerCount ]
      LoadBalancers:
        - ContainerName: mojintranet
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      Role: !FindInMap [ EnvironmentMap, !Ref Environment, ECSRole ]
      TaskDefinition: !Ref IntranetTaskDefinition
  ##
  # Load Balancer
  ##
  LoadBalancer:
    Condition: IsActiveAndUsesLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: 'internet-facing'
      SecurityGroups:
        - !FindInMap [ EnvironmentMap, !Ref Environment, SecurityGroup ]
      Subnets:
        - !FindInMap [ EnvironmentMap, !Ref Environment, ELBSubnet1 ]
        - !FindInMap [ EnvironmentMap, !Ref Environment, ELBSubnet2 ]
  TargetGroup:
    Condition: IsActiveAndUsesLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - LoadBalancer
    Properties:
      Protocol: HTTP
      Port: '80'
      VpcId: !FindInMap [ EnvironmentMap, !Ref Environment, TargetGroupVPC ]
      HealthCheckPath: "/wp/readme.html"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 20
  HttpListener:
    Condition: IsActiveAndUsesLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TargetGroup
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: '80'
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  HttpsListener:
    Condition: IsActiveAndUsesLoadBalancer
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TargetGroup
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: '443'
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !If [ UseCustomSSLCertificateArn, !Ref CustomSslCertificateArn, !FindInMap [ EnvironmentMap, !Ref Environment, SSLCertificateArn ] ]
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup


  ##
  # DNS record
  ##
  DNSRecord:
    Condition: IsActive
    Type: AWS::Route53::RecordSet
    DependsOn:
      - LoadBalancer
    Properties:
      HostedZoneName: !FindInMap [ EnvironmentMap, !Ref Environment, HostedZone ]
      Name: !Ref ServerName
      Type: "A"
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID

